/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package FormInternos;

import Adicional.AutoCompletion;
import Adicional.Util;
import static FormInternos.JIListaVentasPendientes.valorIGV;
import com.itextpdf.text.Document;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.text.Font;
import com.itextpdf.text.pdf.PdfPTable;
import accesodatos.*;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.PdfPCell;
import entidades.*;
import facturacionelectronica.EnvioPSE;
import facturacionelectronica.JDConfirmacion;
import facturacionelectronica.RespuestaPSE;
import java.awt.Desktop;
import java.awt.HeadlessException;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.URL;
import java.sql.Date;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.*;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.view.JasperViewer;
import javax.swing.JFileChooser;
import javax.swing.table.TableModel;
import jxl.write.*;
import jxl.*;

/**
 *
 * @author EDWARD
 */
public class JIConsultaVentasMonitor2 extends javax.swing.JInternalFrame {

    /**
     * Creates new form JIConsultaVentas
     */
    public JIConsultaVentasMonitor2() {
        initComponents();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    DefaultTableModel dtm = null;
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        Imprimir = new javax.swing.JMenuItem();
        Enviar = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        btnmostrar = new javax.swing.JButton();
        btnimprimir = new javax.swing.JButton();
        jdprFecInicial = new com.michaelbaranov.microba.calendar.DatePicker();
        jdprFecFinal = new com.michaelbaranov.microba.calendar.DatePicker();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        btnimprimir1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        tbxnroventas = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        tbxtotal = new javax.swing.JTextField();

        Imprimir.setText("Imprimir ticket");
        Imprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ImprimirActionPerformed(evt);
            }
        });
        jPopupMenu1.add(Imprimir);

        Enviar.setText("Enviar documento");
        Enviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EnviarActionPerformed(evt);
            }
        });
        jPopupMenu1.add(Enviar);

        setClosable(true);
        setTitle("Consulta de envío de comprobantes electrónicos");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), "Filtro"));

        jLabel7.setText("Fecha inicial:");

        jLabel8.setText("Fecha final:");

        btnmostrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagen/show.png"))); // NOI18N
        btnmostrar.setText("Mostrar");
        btnmostrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnmostrarActionPerformed(evt);
            }
        });

        btnimprimir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagen/Print2.png"))); // NOI18N
        btnimprimir.setText("Imprimir");
        btnimprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnimprimirActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel9.setText("Total comprobantes:");

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel10.setText("Total enviados:");

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(0, 51, 153));
        jLabel13.setText("0");

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel12.setText("0");

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel11.setText("Total No enviados:");

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(204, 0, 0));
        jLabel14.setText("0");

        btnimprimir1.setText("Exportar");
        btnimprimir1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnimprimir1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jdprFecInicial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jdprFecFinal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addGap(49, 49, 49)
                                .addComponent(jLabel8)))
                        .addGap(48, 48, 48)
                        .addComponent(btnmostrar, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnimprimir)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnimprimir1, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(51, 51, 51)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnmostrar, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnimprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnimprimir1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jdprFecInicial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jdprFecFinal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12)
                    .addComponent(jLabel13)
                    .addComponent(jLabel14))
                .addContainerGap())
        );

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Idventa_IdIngreso", "Tipo", "Documento Elec.", "Cliente", "Fecha", "F. Entrega", "Importe total", "Enviado", "Respuesta", "Tipo", "idventa", "Es adelanto", "Ticket"
            }
        ));
        jTable1.setComponentPopupMenu(jPopupMenu1);
        jScrollPane1.setViewportView(jTable1);

        jLabel1.setText("Nro de ventas:");

        jLabel3.setText("Total ventas:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 906, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tbxnroventas, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tbxtotal, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(tbxnroventas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(tbxtotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3)))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
void OcultarColumna(int columna) {
        jTable1.getColumnModel().getColumn(columna).setMaxWidth(0);
        jTable1.getColumnModel().getColumn(columna).setMinWidth(0);
        jTable1.getColumnModel().getColumn(columna).setPreferredWidth(0);
    }
    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        System.out.println("abriendo form JIConsultaVentasMonitor2");
        try {
            dtm = (DefaultTableModel) jTable1.getModel();
            OcultarColumna(0);
            OcultarColumna(9);
            OcultarColumna(10);
            OcultarColumna(11);
            Util.AlinearDerecha(jTable1, 6);
            //        OcultarColumna(2);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(80);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(150);
            jTable1.getColumnModel().getColumn(3).setPreferredWidth(250);
            jTable1.getColumnModel().getColumn(5).setPreferredWidth(140);
            jTable1.getColumnModel().getColumn(7).setPreferredWidth(70);
            jTable1.getColumnModel().getColumn(8).setPreferredWidth(350);
            jTable1.getColumnModel().getColumn(12).setPreferredWidth(150);
//            Util.ModificarTamañoJtable(jTable1,2,150);
//            Util.ModificarTamañoJtable(jTable1,3,250);
//            Util.ModificarTamañoJtable(jTable1,8,350);
//            Util.ModificarTamañoJtable(jTable1,12,150);
//            Util.ModificarTamañoJtable(jTable1,12,100);
        } catch (Exception e) {
            System.out.println(Util.exceptionToString(e));
        }

    }//GEN-LAST:event_formInternalFrameOpened

    private void btnmostrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnmostrarActionPerformed
        try {
            VerDatos();
            int nrofilas = 0, totalEnviados = 0;
            float totalventas = 0;
            int filas = jTable1.getRowCount();
            if (filas > 0) {
                for (int i = 0; i < filas; i++) {
                    nrofilas += 1;
                    totalventas += Float.parseFloat(dtm.getValueAt(i, 6).toString());
                    String flag = dtm.getValueAt(i, 7).toString();
                    if (flag.equals("SI")) {
                        totalEnviados = totalEnviados + 1;
                    }
                }

            } else {
                totalventas = 0;
                nrofilas = 0;
            }
            jLabel12.setText(String.valueOf(nrofilas));
            jLabel13.setText(String.valueOf(totalEnviados));
            jLabel14.setText(String.valueOf(nrofilas - totalEnviados));
            tbxnroventas.setText(String.valueOf(nrofilas));
            tbxtotal.setText(String.valueOf(totalventas));
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, e.toString());
        }
    }//GEN-LAST:event_btnmostrarActionPerformed

    private void btnimprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnimprimirActionPerformed
        Imprimir();
    }//GEN-LAST:event_btnimprimirActionPerformed

    private void ImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ImprimirActionPerformed

        imprimir(2);
    }//GEN-LAST:event_ImprimirActionPerformed

    private void EnviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EnviarActionPerformed
        int fila = jTable1.getSelectedRow();
        String enviado = jTable1.getValueAt(fila, 7).toString();
        String tipoDoc = jTable1.getValueAt(fila, 1).toString();
        String flagAdelanto = jTable1.getValueAt(fila, 11).toString();
        float monto = Float.parseFloat(jTable1.getValueAt(fila, 6).toString()) ;
        if (enviado.toLowerCase().equals("si")) {
            JOptionPane.showMessageDialog(rootPane, ":. El documento ya se ha enviado :( .:");
            return;
        }
        if (tipoDoc.toUpperCase().equals("NOTA DE VENTA")) {
            JOptionPane.showMessageDialog(rootPane, ":. El documento NOTA DE VENTA no se puede enviar :( .:");
            return;
        }
        int idVentaOIngreso = Integer.parseInt(jTable1.getValueAt(fila, 0).toString());
        String tipoF = jTable1.getValueAt(fila, 9).toString();
        int idVenta = Integer.parseInt(jTable1.getValueAt(fila, 10).toString());
        ConsultaVentas2 datosVenta = null;
        List<ConsultaVentas2> datosVentaDetalle = null;
        try {

            if (tipoF.equals("v")) {
                datosVenta = VentasADN.getDatosVenta(null, null, idVentaOIngreso, false).get(0);
            } else {
                datosVenta = VentasADN.getDatosVenta2(null, null, idVentaOIngreso, false).get(0);
            }
            if (flagAdelanto.equals("1")) {
                datosVentaDetalle = new ArrayList<>();
//                                String codigo, String producto, float cantidad, float precio, 
//                                float importe,int idproducto,float afectacionIGV
                datosVentaDetalle.add(new ConsultaVentas2("-",
                        "ADELANTO DE " + Formatos.df.format(monto) + "DE PAGO DE SERVICIO ",
                        1, monto,
                        monto, 0, monto - (monto / (1 + valorIGV))));
            } else {
                datosVentaDetalle = VentasADN.Detalle_Ventas(idVenta);
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(rootPane, ":. Ocurrió un error al cargar los datos :( .:" + ex.getMessage());
            Logger.getLogger(JIConsultaVentasMonitor2.class.getName()).log(Level.SEVERE, null, ex);
            return;
        } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(rootPane, ":. Ocurrió un error al cargar los datos :( .:" + ex.getMessage());
            Logger.getLogger(JIConsultaVentasMonitor2.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }

        RespuestaPSE resultEnvioPSE = null;
        try {
            //enviar a pse

            EnvioPSE envioPSE = new EnvioPSE();
            String jsonBody = envioPSE.paramToJson(datosVenta, datosVentaDetalle);
            resultEnvioPSE = envioPSE.envioJsonPSE(jsonBody);

            if (resultEnvioPSE.isResult()) {
                Ingresos doc = new Ingresos();
                doc.setIdIngreso(idVentaOIngreso);
                doc.setEnvioPseFlag("1");
                doc.setEnvioPseMensaje("Recibido correctamente");
                doc.setNroRespuesta(resultEnvioPSE.getId());
                doc.setCodigoQR(resultEnvioPSE.getCodigoQR());
                doc.setXmlHash(resultEnvioPSE.getXmlHash());
                IngresosADN.updateFlagEnvioPSE(doc);
            } else {
                Ingresos doc = new Ingresos();
                doc.setIdIngreso(idVentaOIngreso);
                doc.setEnvioPseFlag("0");
                doc.setEnvioPseMensaje(resultEnvioPSE.getErrCode() + "-" + resultEnvioPSE.getErrMessage());
                IngresosADN.updateFlagEnvioPSE(doc);
                JOptionPane.showMessageDialog(rootPane, ":. Hubo un problema al enviar el documento electrónico :( .:\n" + doc.getEnvioPseMensaje());
            }
        } catch (Exception e) {
            System.out.println(Util.exceptionToString(e));
            Logger.getLogger(JIVentas.class.getName()).log(Level.SEVERE, null, e);
            JOptionPane.showMessageDialog(rootPane, ":. Ocurrió un error al enviar el documento :( .:" + e.getMessage());
            return;
        }
        if (resultEnvioPSE.isResult()) {
            try {
                String rutaDoc = ParametrosADN.Lista().get(0).getRutadocs();
                if (rutaDoc.equals("")) {
                    JOptionPane.showMessageDialog(rootPane, ":. Configuración permite guardar documentos en pc, pero no se encuentra ruta configurada :( .:");
                } else {
                    if (resultEnvioPSE.getPdfRespuesta() != null) {
                        Util.getPDF(resultEnvioPSE.getPdfRespuesta(), rutaDoc + "/PDF/" + datosVenta.getSerieDocE() + "-"
                                + String.format("%08d", datosVenta.getNumDocE()) + ".pdf");
                    }
                    if (resultEnvioPSE.getXmlRespuesta() != null) {
                        Util.getPDF(resultEnvioPSE.getXmlRespuesta(), rutaDoc + "/XML/" + datosVenta.getSerieDocE() + "-"
                                + String.format("%08d", datosVenta.getNumDocE()) + ".xml");
                    }
                }
            } catch (Exception e) {
                System.out.println(Util.exceptionToString(e));
                Logger.getLogger(JIVentas.class.getName()).log(Level.SEVERE, null, e);
                JOptionPane.showMessageDialog(rootPane, ":. Ocurrió un error inesperado al guardar documentos en pc :(: " + e.toString());
            }

        }
        try {
            VerDatos();
        } catch (SQLException ex) {
            Logger.getLogger(JIConsultaVentasMonitor2.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(JIConsultaVentasMonitor2.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (resultEnvioPSE.isResult()) {
            JOptionPane.showMessageDialog(rootPane, ":. Enviado correctamente! :) .:");
            //
        }
    }//GEN-LAST:event_EnviarActionPerformed

    private void btnimprimir1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnimprimir1ActionPerformed
        try {
            JFileChooser fileChooser = new JFileChooser();
            if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
                //                File file = fileChooser.getSelectedFile();
                String wa = fileChooser.getSelectedFile().getAbsolutePath() + ".xls";
                File we = new File(wa);
                WritableWorkbook workbook1 = Workbook.createWorkbook(we);
                WritableSheet sheet1 = workbook1.createSheet("First Sheet", 0);
                TableModel model = jTable1.getModel();
                for (int i = 0; i < model.getColumnCount(); i++) {
                    Label column = new Label(i, 0, model.getColumnName(i));
                    sheet1.addCell(column);
                }

                int j = 0;
                for (int i = 0; i < model.getRowCount(); i++) {
                    for (j = 0; j < model.getColumnCount(); j++) {
                        Label row = new Label(j, i + 1,
                                model.getValueAt(i, j).toString());
                        sheet1.addCell(row);
                    }
                }

                workbook1.write();
                workbook1.close();
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error creating Excel file.");
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnimprimir1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem Enviar;
    private javax.swing.JMenuItem Imprimir;
    private javax.swing.JButton btnimprimir;
    private javax.swing.JButton btnimprimir1;
    private javax.swing.JButton btnmostrar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private com.michaelbaranov.microba.calendar.DatePicker jdprFecFinal;
    private com.michaelbaranov.microba.calendar.DatePicker jdprFecInicial;
    private javax.swing.JTextField tbxnroventas;
    private javax.swing.JTextField tbxtotal;
    // End of variables declaration//GEN-END:variables
    private void VerDatos() throws SQLException, ClassNotFoundException {
        try {
            int filas = jTable1.getRowCount();
            for (int i = 0; i < filas; i++) {
                dtm.removeRow(0);
            }
            String fec1 = Formatos.sdfFecha.format(jdprFecInicial.getDate());
            String fec2 = Formatos.sdfFecha.format(jdprFecFinal.getDate());
            Date fechasql1 = Formatos.FechaSQL(fec1);
            Date fechasql2 = Formatos.FechaSQL(fec2);
            List<ConsultaVentas2> list = VentasADN.getDatosVenta(fechasql1, fechasql2, 0, true);
            list.addAll(VentasADN.getDatosVenta2(fechasql1, fechasql2, 0, true));

            List<ConsultaVentas2> sortedList = list.stream()
                    .sorted(Comparator.comparingInt(ConsultaVentas2::getNumDocE).reversed())
                    .collect(Collectors.toList());

            for (ConsultaVentas2 la : sortedList) {
                dtm.addRow(la.arregloDatosMonitor());
            }
//            FormatoTabla ft  = new FormatoTabla();
//            FormatoTabla.darFormato(jTable1,6);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, e.toString());
        }
    }

    void Imprimir() {
        try {
            //creamos un documento
            Document doc = new Document(PageSize.A4, 10f, 10f, 50f, 20f);
            OutputStream archivo = new FileOutputStream("Reporte_ventas.pdf");
            PdfWriter.getInstance(doc, archivo);

            //abrimos el archivo
            doc.open();
            Paragraph encabezado = new Paragraph("Reporte de ventas", FontFactory.getFont("arial", 24, Font.BOLD));
            encabezado.setAlignment(encabezado.ALIGN_CENTER);
            Paragraph separacion = new Paragraph("\n");
            Paragraph fecha1 = new Paragraph("Del: " + Formatos.sdfFecha.format(jdprFecInicial.getDate()) + "   " + "Al: " + Formatos.sdfFecha.format(jdprFecFinal.getDate()));
            fecha1.setAlignment(fecha1.ALIGN_CENTER);
//            Paragraph fecha2 = new Paragraph();
            Paragraph linea = new Paragraph("-------------------------------------------------------------------------------------------------------------------------------------");

            BaseFont tipo = BaseFont.createFont(BaseFont.HELVETICA, BaseFont.CP1252, false);
            Font fuente = new Font(tipo, 13, Font.BOLD, BaseColor.BLUE);
            //creamos la tabla para las filas del jtable
            PdfPTable tabla = new PdfPTable(8);
            tabla.getDefaultCell().setBorder(0);
            tabla.getDefaultCell().setBackgroundColor(BaseColor.LIGHT_GRAY);
            int[] ancho = new int[]{50, 60, 160, 60, 200, 70, 70, 100};
            tabla.setWidths(ancho);
            //tabla.setSpacingBefore(50);
            tabla.setWidthPercentage(100);
            float tamanioCeldaPrincipal = 8.5f;
            PdfPCell cell = new PdfPCell(new Phrase("Nro", new com.itextpdf.text.Font(tipo, tamanioCeldaPrincipal, com.itextpdf.text.Font.BOLD, BaseColor.BLACK)));
            cell.setBorderWidthBottom(1);
            cell.setBackgroundColor(BaseColor.GRAY);
            tabla.addCell(cell);

            cell = new PdfPCell(new Phrase("Número", new com.itextpdf.text.Font(tipo, tamanioCeldaPrincipal, com.itextpdf.text.Font.BOLD, BaseColor.BLACK)));
            cell.setBorderWidthBottom(1);
            cell.setBackgroundColor(BaseColor.GRAY);
            tabla.addCell(cell);

            cell = new PdfPCell(new Phrase("Mecánico", new com.itextpdf.text.Font(tipo, tamanioCeldaPrincipal, com.itextpdf.text.Font.BOLD, BaseColor.BLACK)));
            cell.setBorderWidthBottom(1);
            cell.setBackgroundColor(BaseColor.GRAY);
            tabla.addCell(cell);

            cell = new PdfPCell(new Phrase("Tipo", new com.itextpdf.text.Font(tipo, tamanioCeldaPrincipal, com.itextpdf.text.Font.BOLD, BaseColor.BLACK)));
            cell.setBorderWidthBottom(1);
            cell.setBackgroundColor(BaseColor.GRAY);
            tabla.addCell(cell);

            cell = new PdfPCell(new Phrase("Cliente", new com.itextpdf.text.Font(tipo, tamanioCeldaPrincipal, com.itextpdf.text.Font.BOLD, BaseColor.BLACK)));
            cell.setBorderWidthBottom(1);
            cell.setBackgroundColor(BaseColor.GRAY);
            tabla.addCell(cell);

            cell = new PdfPCell(new Phrase("Vehículo", new com.itextpdf.text.Font(tipo, tamanioCeldaPrincipal, com.itextpdf.text.Font.BOLD, BaseColor.BLACK)));
            cell.setBorderWidthBottom(1);
            cell.setBackgroundColor(BaseColor.GRAY);
            tabla.addCell(cell);

            PdfPCell cell0 = new PdfPCell(new Phrase("Fec. venta", new com.itextpdf.text.Font(tipo, tamanioCeldaPrincipal, com.itextpdf.text.Font.BOLD, BaseColor.BLACK)));
            cell0.setBorderWidthBottom(1);
            cell0.setBackgroundColor(BaseColor.GRAY);

//            cell0.setColspan(2);
            tabla.addCell(cell0);

            cell = new PdfPCell(new Phrase("Importe total", new com.itextpdf.text.Font(tipo, tamanioCeldaPrincipal, com.itextpdf.text.Font.BOLD, BaseColor.BLACK)));
            cell.setBorderWidthBottom(1);
            cell.setBackgroundColor(BaseColor.GRAY);

            tabla.addCell(cell);

            PdfPTable tabla2 = new PdfPTable(8);
            tabla2.getDefaultCell().setBorder(0);
            int[] ancho2 = new int[]{50, 60, 160, 60, 200, 70, 70, 100};

            tabla2.setWidths(ancho2);
            tabla2.setWidthPercentage(100);

            int filas = jTable1.getRowCount();
            int idventa = 0;
            for (int i = 0; i < filas; i++) {
                idventa = Integer.parseInt(dtm.getValueAt(i, 0).toString());

                PdfPCell cellx = new PdfPCell(new Phrase(String.valueOf(i + 1), new com.itextpdf.text.Font(tipo, tamanioCeldaPrincipal, com.itextpdf.text.Font.NORMAL, BaseColor.BLACK)));
                cellx.setBorder(0);
                tabla2.addCell(cellx);

                cellx = new PdfPCell(new Phrase(dtm.getValueAt(i, 1).toString(), new com.itextpdf.text.Font(tipo, tamanioCeldaPrincipal, com.itextpdf.text.Font.NORMAL, BaseColor.BLACK)));
                cellx.setBorder(0);
                tabla2.addCell(cellx);

                cellx = new PdfPCell(new Phrase(dtm.getValueAt(i, 2).toString(), new com.itextpdf.text.Font(tipo, tamanioCeldaPrincipal, com.itextpdf.text.Font.NORMAL, BaseColor.BLACK)));
                cellx.setBorder(0);
                tabla2.addCell(cellx);

                cellx = new PdfPCell(new Phrase(dtm.getValueAt(i, 3).toString(), new com.itextpdf.text.Font(tipo, tamanioCeldaPrincipal, com.itextpdf.text.Font.NORMAL, BaseColor.BLACK)));
                cellx.setBorder(0);
                tabla2.addCell(cellx);

                cellx = new PdfPCell(new Phrase(dtm.getValueAt(i, 4).toString(), new com.itextpdf.text.Font(tipo, tamanioCeldaPrincipal, com.itextpdf.text.Font.NORMAL, BaseColor.BLACK)));
                cellx.setBorder(0);
                tabla2.addCell(cellx);

                cellx = new PdfPCell(new Phrase(dtm.getValueAt(i, 5).toString(), new com.itextpdf.text.Font(tipo, tamanioCeldaPrincipal, com.itextpdf.text.Font.NORMAL, BaseColor.BLACK)));
                cellx.setBorder(0);
                tabla2.addCell(cellx);

                cellx = new PdfPCell(new Phrase(dtm.getValueAt(i, 6).toString(), new com.itextpdf.text.Font(tipo, tamanioCeldaPrincipal, com.itextpdf.text.Font.NORMAL, BaseColor.BLACK)));
                cellx.setBorder(0);
                tabla2.addCell(cellx);

                //tabla2.addCell(dtm.getValueAt(i, 4).toString());
                cellx = new PdfPCell(new Phrase(dtm.getValueAt(i, 7).toString(), new com.itextpdf.text.Font(tipo, tamanioCeldaPrincipal, com.itextpdf.text.Font.NORMAL, BaseColor.BLACK)));

                cellx.setBorder(0);
                cellx.setHorizontalAlignment(Element.ALIGN_RIGHT);
                tabla2.addCell(cellx);

                //tabla2.addCell(dtm.getValueAt(i, 5).toString());
                float tamanioCeldaSecun = 8f;
                PdfPCell cell1 = new PdfPCell(new Phrase("", new com.itextpdf.text.Font(tipo, tamanioCeldaSecun, com.itextpdf.text.Font.NORMAL, BaseColor.BLACK)));
                PdfPCell cell2 = new PdfPCell(new Phrase("", new com.itextpdf.text.Font(tipo, tamanioCeldaSecun, com.itextpdf.text.Font.NORMAL, BaseColor.BLACK)));
                PdfPCell cell3 = new PdfPCell(new Phrase("Nro", new com.itextpdf.text.Font(tipo, tamanioCeldaSecun, com.itextpdf.text.Font.NORMAL, BaseColor.BLACK)));
                PdfPCell cell4 = new PdfPCell(new Phrase("Codigo", new com.itextpdf.text.Font(tipo, tamanioCeldaSecun, com.itextpdf.text.Font.NORMAL, BaseColor.BLACK)));
                PdfPCell cell5 = new PdfPCell(new Phrase("Producto", new com.itextpdf.text.Font(tipo, tamanioCeldaSecun, com.itextpdf.text.Font.NORMAL, BaseColor.BLACK)));
                PdfPCell cell6 = new PdfPCell(new Phrase("Cantidad", new com.itextpdf.text.Font(tipo, tamanioCeldaSecun, com.itextpdf.text.Font.NORMAL, BaseColor.BLACK)));
                PdfPCell cell7 = new PdfPCell(new Phrase("Precio", new com.itextpdf.text.Font(tipo, tamanioCeldaSecun, com.itextpdf.text.Font.NORMAL, BaseColor.BLACK)));
                PdfPCell cell8 = new PdfPCell(new Phrase("Importe", new com.itextpdf.text.Font(tipo, tamanioCeldaSecun, com.itextpdf.text.Font.NORMAL, BaseColor.BLACK)));

                cell1.setBorderWidthBottom(0);
                cell1.setBorderWidthTop(0);
                cell1.setBorderWidthLeft(0);
                cell1.setBorderWidthRight(0);

                cell2.setBorderWidthBottom(1);
                cell3.setBorderWidthBottom(1);
                cell4.setBorderWidthBottom(1);
                cell5.setBorderWidthBottom(1);
                cell6.setBorderWidthBottom(1);
                cell7.setBorderWidthBottom(1);
                cell8.setBorderWidthBottom(1);

                cell2.setBackgroundColor(BaseColor.LIGHT_GRAY);
                cell3.setBackgroundColor(BaseColor.LIGHT_GRAY);
                cell4.setBackgroundColor(BaseColor.LIGHT_GRAY);
                cell5.setBackgroundColor(BaseColor.LIGHT_GRAY);
                cell6.setBackgroundColor(BaseColor.LIGHT_GRAY);
                cell7.setBackgroundColor(BaseColor.LIGHT_GRAY);
                cell8.setBackgroundColor(BaseColor.LIGHT_GRAY);

                tabla2.addCell(cell1);
                tabla2.addCell(cell2);
                tabla2.addCell(cell3);
                tabla2.addCell(cell4);
                tabla2.addCell(cell5);
                tabla2.addCell(cell6);
                tabla2.addCell(cell7);
                tabla2.addCell(cell8);
                int o = 0;

                for (ConsultaVentas2 j : VentasADN.Detalle_Ventas(idventa)) {
                    tabla2.addCell("");
                    tabla2.addCell("");
                    o++;
                    PdfPCell celld_0 = new PdfPCell(new Phrase(String.valueOf(o), new com.itextpdf.text.Font(tipo, tamanioCeldaSecun, com.itextpdf.text.Font.NORMAL, BaseColor.BLACK)));
                    celld_0.setBorderWidth(0);

                    PdfPCell celld_0_1 = new PdfPCell(new Phrase(j.getCodigo(), new com.itextpdf.text.Font(tipo, tamanioCeldaSecun, com.itextpdf.text.Font.NORMAL, BaseColor.BLACK)));
                    celld_0_1.setBorderWidth(0);

                    PdfPCell celld_1 = new PdfPCell(new Phrase(j.getProducto(), new com.itextpdf.text.Font(tipo, tamanioCeldaSecun, com.itextpdf.text.Font.NORMAL, BaseColor.BLACK)));
                    celld_1.setBorderWidth(0);

                    PdfPCell celld_2 = new PdfPCell(new Phrase(Formatos.df.format(j.getCantidad()), new com.itextpdf.text.Font(tipo, tamanioCeldaSecun, com.itextpdf.text.Font.NORMAL, BaseColor.BLACK)));
                    celld_2.setHorizontalAlignment(com.itextpdf.text.Element.ALIGN_RIGHT);
                    celld_2.setBorderWidth(0);

                    PdfPCell celld_3 = new PdfPCell(new Phrase(Formatos.df.format(j.getPrecio()), new com.itextpdf.text.Font(tipo, 7.5f, com.itextpdf.text.Font.NORMAL, BaseColor.BLACK)));
                    celld_3.setHorizontalAlignment(com.itextpdf.text.Element.ALIGN_RIGHT);
                    celld_3.setBorderWidth(0);

                    PdfPCell celld_4 = new PdfPCell(new Phrase(Formatos.df.format(j.getImporte()), new com.itextpdf.text.Font(tipo, tamanioCeldaSecun, com.itextpdf.text.Font.NORMAL, BaseColor.BLACK)));
                    celld_4.setHorizontalAlignment(com.itextpdf.text.Element.ALIGN_RIGHT);
                    celld_4.setBorderWidth(0);

                    //celld_1.setColspan(2);
                    tabla2.addCell(celld_0);

                    tabla2.addCell(celld_0_1);
                    tabla2.addCell(celld_1);
                    tabla2.addCell(celld_2);
                    tabla2.addCell(celld_3);
                    tabla2.addCell(celld_4);
                }

                tabla2.addCell(" ");
                tabla2.addCell(" ");
                tabla2.addCell(" ");
                tabla2.addCell(" ");
                tabla2.addCell(" ");
                tabla2.addCell(" ");
                tabla2.addCell(" ");
                tabla2.addCell(" ");
            }

            //le añadimos los elementos al documento
            doc.add(encabezado);

            doc.add(fecha1);
            doc.add(separacion);
            doc.add(tabla);
            doc.add(tabla2);
            doc.add(linea);
            doc.close();
            archivo.close();

            //abrir el documento
            File arch = new File("Reporte_ventas.pdf");
            Desktop.getDesktop().open(arch);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "Error al imprimir reporte: " + e.getMessage());
        }
    }

    private boolean imprimir(int tipo) throws NumberFormatException, HeadlessException {
        try {
            int fila = jTable1.getSelectedRow();
            String enviado = jTable1.getValueAt(fila, 7).toString();
            String tipoDoc = jTable1.getValueAt(fila, 1).toString();
            String tipoF = jTable1.getValueAt(fila, 9).toString();
            String flagAdelanto = jTable1.getValueAt(fila, 11).toString();
            int idVenta = Integer.parseInt(jTable1.getValueAt(fila, 10).toString());
//            if (enviado.toLowerCase().equals("no")) {
//                JOptionPane.showMessageDialog(rootPane, ":. No puede imprimir el documento ya que aun no se ha enviado :( .:");
//                return true;
//            }
            int idVentaIngreso = Integer.parseInt(jTable1.getValueAt(fila, 0).toString());
            JDConfirmacion dialog = new JDConfirmacion(null, closable, idVentaIngreso, false,
                    ParametrosADN.Lista().get(0).getNombreImpresora(), tipoF, idVenta,flagAdelanto);
            dialog.setLocationRelativeTo(this);
            dialog.setVisible(true);
//            int idVenta = Integer.parseInt(jTable1.getValueAt(fila, 2).toString());
//            List<Parametros> datosEmpresa = ParametrosADN.Lista();
//            ConsultaVentas2 datosVenta = VentasADN.getDatosVenta(null,null, idVenta).get(0);
//            List<ConsultaVentas2> datosVentaDetalle = VentasADN.Detalle_Ventas(idVenta);
//            JasperPrint resultImpr = Impresion.Imprimir(tipo, datosEmpresa, datosVenta, datosVentaDetalle,false);
//            if (resultImpr == null) {
//                JOptionPane.showMessageDialog(rootPane, ":. Ocurrió un error al imprimir el documento :( .:" + resultImpr);
//            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(rootPane, ":. Ocurrió un error al imprimir :( .:" + ex.getMessage());
//            Logger.getLogger(JIConsultaVentasMonitor.class.getName()).log(Level.SEVERE, null, ex);
        }
        return false;
    }

    void Imprimir2() throws FileNotFoundException, DocumentException, IOException, SQLException, ClassNotFoundException {
//        try {
        //creamos un documento
        Document doc = new Document(PageSize.A4, 30f, 20f, 50f, 20f);
        OutputStream archivo = new FileOutputStream("Reporte_ventas.pdf");
        PdfWriter.getInstance(doc, archivo);

        //abrimos el archivo
        doc.open();
        Paragraph encabezado = new Paragraph("Reporte de ventas2", FontFactory.getFont("arial", 24, Font.BOLD));
        encabezado.setAlignment(encabezado.ALIGN_CENTER);
        Paragraph separacion = new Paragraph("\n");
        Paragraph fecha1 = new Paragraph("Del: " + Formatos.sdfFecha.format(jdprFecInicial.getDate()) + "   " + "Al: " + Formatos.sdfFecha.format(jdprFecInicial.getDate()));
        fecha1.setAlignment(fecha1.ALIGN_CENTER);
//            Paragraph fecha2 = new Paragraph();
        Paragraph linea = new Paragraph("-------------------------------------------------------------------------------------------------------------------------------------");

        BaseFont tipo = BaseFont.createFont(BaseFont.HELVETICA, BaseFont.CP1252, false);
        Font fuente = new Font(tipo, 13, Font.BOLD, BaseColor.BLUE);
        Paragraph totales = new Paragraph("Nro ventas: " + tbxnroventas.getText() + "                                                                                                   " + "Total: " + tbxtotal.getText(), fuente);

        //creamos la tabla para las filas del jtable
        PdfPTable tabla = new PdfPTable(8);
        tabla.getDefaultCell().setBorder(0);
        tabla.getDefaultCell().setBackgroundColor(BaseColor.LIGHT_GRAY);
        int[] ancho = new int[]{50, 50, 50, 90, 200, 50, 50, 100};
        tabla.setWidths(ancho);
        //tabla.setSpacingBefore(50);
        tabla.setWidthPercentage(100);
        PdfPCell cell = new PdfPCell(new Phrase("Nro", new com.itextpdf.text.Font(tipo, 9, com.itextpdf.text.Font.BOLD, BaseColor.BLACK)));
        cell.setBorderWidthBottom(1);
        cell.setBackgroundColor(BaseColor.GRAY);
        tabla.addCell(cell);

        cell = new PdfPCell(new Phrase("Serie", new com.itextpdf.text.Font(tipo, 9, com.itextpdf.text.Font.BOLD, BaseColor.BLACK)));
        cell.setBorderWidthBottom(1);
        cell.setBackgroundColor(BaseColor.GRAY);
        tabla.addCell(cell);

        cell = new PdfPCell(new Phrase("Numero", new com.itextpdf.text.Font(tipo, 9, com.itextpdf.text.Font.BOLD, BaseColor.BLACK)));
        cell.setBorderWidthBottom(1);
        cell.setBackgroundColor(BaseColor.GRAY);
        tabla.addCell(cell);

        cell = new PdfPCell(new Phrase("Tipo", new com.itextpdf.text.Font(tipo, 9, com.itextpdf.text.Font.BOLD, BaseColor.BLACK)));
        cell.setBorderWidthBottom(1);
        cell.setBackgroundColor(BaseColor.GRAY);
        tabla.addCell(cell);

        cell = new PdfPCell(new Phrase("Cliente", new com.itextpdf.text.Font(tipo, 9, com.itextpdf.text.Font.BOLD, BaseColor.BLACK)));
        cell.setBorderWidthBottom(1);
        cell.setBackgroundColor(BaseColor.GRAY);
        tabla.addCell(cell);

        PdfPCell cell0 = new PdfPCell(new Phrase("Fecha de venta", new com.itextpdf.text.Font(tipo, 9, com.itextpdf.text.Font.BOLD, BaseColor.BLACK)));
        cell0.setBorderWidthBottom(1);
        cell0.setBackgroundColor(BaseColor.GRAY);

        cell0.setColspan(2);

        tabla.addCell(cell0);

        cell = new PdfPCell(new Phrase("Importe total", new com.itextpdf.text.Font(tipo, 9, com.itextpdf.text.Font.BOLD, BaseColor.BLACK)));
        cell.setBorderWidthBottom(1);
        cell.setBackgroundColor(BaseColor.GRAY);

        tabla.addCell(cell);

        PdfPTable tabla2 = new PdfPTable(8);
        tabla2.getDefaultCell().setBorder(0);
        int[] ancho2 = new int[]{50, 50, 50, 90, 200, 50, 50, 100};

        tabla2.setWidths(ancho2);
        tabla2.setWidthPercentage(100);

        int filas = jTable1.getRowCount();
        int idventa = 0;
        for (int i = 0; i < filas; i++) {
            idventa = Integer.parseInt(dtm.getValueAt(i, 0).toString());

            PdfPCell cellx = new PdfPCell(new Phrase(String.valueOf(i + 1), new com.itextpdf.text.Font(tipo, 9, com.itextpdf.text.Font.NORMAL, BaseColor.BLACK)));
            cellx.setBorder(0);
            tabla2.addCell(cellx);

            cellx = new PdfPCell(new Phrase(dtm.getValueAt(i, 0).toString(), new com.itextpdf.text.Font(tipo, 9, com.itextpdf.text.Font.NORMAL, BaseColor.BLACK)));
            cellx.setBorder(0);
            tabla2.addCell(cellx);

            cellx = new PdfPCell(new Phrase(dtm.getValueAt(i, 1).toString(), new com.itextpdf.text.Font(tipo, 9, com.itextpdf.text.Font.NORMAL, BaseColor.BLACK)));
            cellx.setBorder(0);
            tabla2.addCell(cellx);

            cellx = new PdfPCell(new Phrase(dtm.getValueAt(i, 2).toString(), new com.itextpdf.text.Font(tipo, 9, com.itextpdf.text.Font.NORMAL, BaseColor.BLACK)));
            cellx.setBorder(0);
            tabla2.addCell(cellx);

            cellx = new PdfPCell(new Phrase(dtm.getValueAt(i, 3).toString(), new com.itextpdf.text.Font(tipo, 9, com.itextpdf.text.Font.NORMAL, BaseColor.BLACK)));
            cellx.setBorder(0);
            tabla2.addCell(cellx);

            cellx = new PdfPCell(new Phrase(dtm.getValueAt(i, 4).toString(), new com.itextpdf.text.Font(tipo, 9, com.itextpdf.text.Font.NORMAL, BaseColor.BLACK)));
            cellx.setColspan(2);
            cellx.setBorder(0);
            tabla2.addCell(cellx);

            cellx = new PdfPCell(new Phrase(dtm.getValueAt(i, 6).toString(), new com.itextpdf.text.Font(tipo, 9, com.itextpdf.text.Font.NORMAL, BaseColor.BLACK)));

            cellx.setBorder(0);
            cellx.setHorizontalAlignment(Element.ALIGN_RIGHT);
            tabla2.addCell(cellx);

            //tabla2.addCell(dtm.getValueAt(i, 5).toString());
            PdfPCell cell1 = new PdfPCell(new Phrase("", new com.itextpdf.text.Font(tipo, 9, com.itextpdf.text.Font.NORMAL, BaseColor.BLACK)));
            PdfPCell cell2 = new PdfPCell(new Phrase("", new com.itextpdf.text.Font(tipo, 9, com.itextpdf.text.Font.NORMAL, BaseColor.BLACK)));
            PdfPCell cell3 = new PdfPCell(new Phrase("Nro", new com.itextpdf.text.Font(tipo, 9, com.itextpdf.text.Font.NORMAL, BaseColor.BLACK)));
            //PdfPCell cell4 = new PdfPCell(new Phrase("Codigo", new com.itextpdf.text.Font(tipo, 9, com.itextpdf.text.Font.NORMAL, BaseColor.BLACK)));
            PdfPCell cell5 = new PdfPCell(new Phrase("Producto", new com.itextpdf.text.Font(tipo, 9, com.itextpdf.text.Font.NORMAL, BaseColor.BLACK)));
            PdfPCell cell6 = new PdfPCell(new Phrase("Cantidad", new com.itextpdf.text.Font(tipo, 9, com.itextpdf.text.Font.NORMAL, BaseColor.BLACK)));
            PdfPCell cell7 = new PdfPCell(new Phrase("Precio", new com.itextpdf.text.Font(tipo, 9, com.itextpdf.text.Font.NORMAL, BaseColor.BLACK)));
            PdfPCell cell8 = new PdfPCell(new Phrase("Importe", new com.itextpdf.text.Font(tipo, 9, com.itextpdf.text.Font.NORMAL, BaseColor.BLACK)));

            cell1.setBorderWidthBottom(0);
            cell1.setBorderWidthTop(0);
            cell1.setBorderWidthLeft(0);
            cell1.setBorderWidthRight(0);

            cell2.setBorderWidthBottom(1);
            cell3.setBorderWidthBottom(1);
//                cell4.setBorderWidthBottom(1);
            cell5.setBorderWidthBottom(1);
            cell6.setBorderWidthBottom(1);
            cell7.setBorderWidthBottom(1);
            cell8.setBorderWidthBottom(1);

            cell2.setBackgroundColor(BaseColor.LIGHT_GRAY);
            cell3.setBackgroundColor(BaseColor.LIGHT_GRAY);
//                cell4.setBackgroundColor(BaseColor.LIGHT_GRAY);
            cell5.setBackgroundColor(BaseColor.LIGHT_GRAY);
            cell6.setBackgroundColor(BaseColor.LIGHT_GRAY);
            cell7.setBackgroundColor(BaseColor.LIGHT_GRAY);
            cell8.setBackgroundColor(BaseColor.LIGHT_GRAY);

            tabla2.addCell(cell1);
            tabla2.addCell(cell2);
            tabla2.addCell(cell3);
//                tabla2.addCell(cell4);
            tabla2.addCell(cell5);
            tabla2.addCell(cell6);
            tabla2.addCell(cell7);
            tabla2.addCell(cell8);
            int o = 0;

            for (ProductoDetalle j : VentasADN.DetalleVenta(idventa)) {
                tabla2.addCell("");
                tabla2.addCell("");
                o++;
                PdfPCell celld_0 = new PdfPCell(new Phrase(String.valueOf(o), new com.itextpdf.text.Font(tipo, 9, com.itextpdf.text.Font.NORMAL, BaseColor.BLACK)));
                celld_0.setBorderWidth(0);

//                    PdfPCell  celld_0_1  = new PdfPCell(new Phrase("--", new com.itextpdf.text.Font(tipo, 9, com.itextpdf.text.Font.NORMAL, BaseColor.BLACK)));
//                    celld_0_1.setBorderWidth(0);
                PdfPCell celld_1 = new PdfPCell(new Phrase(j.getDescripcion(), new com.itextpdf.text.Font(tipo, 9, com.itextpdf.text.Font.NORMAL, BaseColor.BLACK)));
                celld_1.setBorderWidth(0);

                PdfPCell celld_2 = new PdfPCell(new Phrase(Formatos.df.format(j.getCantidad()), new com.itextpdf.text.Font(tipo, 9, com.itextpdf.text.Font.NORMAL, BaseColor.BLACK)));
                celld_2.setHorizontalAlignment(com.itextpdf.text.Element.ALIGN_RIGHT);
                celld_2.setBorderWidth(0);

                PdfPCell celld_3 = new PdfPCell(new Phrase(Formatos.df.format(j.getPrecio()), new com.itextpdf.text.Font(tipo, 8, com.itextpdf.text.Font.NORMAL, BaseColor.BLACK)));
                celld_3.setHorizontalAlignment(com.itextpdf.text.Element.ALIGN_RIGHT);
                celld_3.setBorderWidth(0);

                PdfPCell celld_4 = new PdfPCell(new Phrase(Formatos.df.format(j.getImporte()), new com.itextpdf.text.Font(tipo, 9, com.itextpdf.text.Font.NORMAL, BaseColor.BLACK)));
                celld_4.setHorizontalAlignment(com.itextpdf.text.Element.ALIGN_RIGHT);
                celld_4.setBorderWidth(0);

                //celld_1.setColspan(2);
                tabla2.addCell(celld_0);

//                    tabla2.addCell( celld_0_1);
                tabla2.addCell(celld_1);
                tabla2.addCell(celld_2);
                tabla2.addCell(celld_3);
                tabla2.addCell(celld_4);
            }

            tabla2.addCell(" ");
            tabla2.addCell(" ");
            tabla2.addCell(" ");
            tabla2.addCell(" ");
            tabla2.addCell(" ");
            tabla2.addCell(" ");
            tabla2.addCell(" ");
            tabla2.addCell(" ");
        }

        //le añadimos los elementos al documento
        doc.add(encabezado);

        doc.add(fecha1);
        doc.add(separacion);
        doc.add(tabla);
        doc.add(tabla2);
        doc.add(linea);
        doc.add(totales);
        doc.close();
        archivo.close();

        //abrir el documento
        File arch = new File("Reporte_ventas.pdf");
        Desktop.getDesktop().open(arch);
//        } catch (Exception e) {
//            JOptionPane.showMessageDialog(rootPane, "Error al imprimir reporte: "+e.getMessage());
//        }
    }
}
