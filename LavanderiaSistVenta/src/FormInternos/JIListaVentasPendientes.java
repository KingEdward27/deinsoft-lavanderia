/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package FormInternos;

import Adicional.AutoCompletion;
import Adicional.SystemOutToLog4j;
import Adicional.Ticket2;
import Adicional.Util;
import static FormInternos.JIVentas.estado;
import static FormInternos.JIVentas.recidido;
import static FormInternos.JIVentas.vuelto;
import JRibbonForm.JFLogin;
import accesodatos.ClientesADN;
import accesodatos.IngresosADN;
import accesodatos.NumeracionDocumentoADN;
import accesodatos.VentasADN;
import accesodatos.ParametrosADN;
import accesodatos.TipoDocADN;
import entidades.*;
import facturacionelectronica.EnvioPSE;
import facturacionelectronica.Impresion;
import facturacionelectronica.JDConfirmacion;
import facturacionelectronica.RespuestaPSE;
import facturacionelectronica.util.Constantes;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.sql.Date;
import java.sql.SQLException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JasperPrint;

/**
 *
 * @author EDWARD
 */
public class JIListaVentasPendientes extends javax.swing.JInternalFrame {

    /**
     * Creates new form JIListaVentasPendientes
     */
    String nroTicket;

    public JIListaVentasPendientes(String nroTicket) {
        initComponents();
        this.nroTicket = nroTicket;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jtbelista = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jbtnImprimirTicket = new javax.swing.JButton();
        jbtnVender = new javax.swing.JButton();
        jbtnGenerarComprobante = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtbelistaproductos = new javax.swing.JTable();
        jtfdSubTotal = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        tbxACuenta = new javax.swing.JTextField();
        tbxnumdoc = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        tbxFechaEntrega = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        tbxTipoServicio1 = new javax.swing.JTextField();
        tbxSaldo = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        cbxClientes = new javax.swing.JComboBox();
        jbtnBCliente1 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jlblTotal = new javax.swing.JLabel();
        jtfdIGV = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        tbxNroVenta = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        lblEstado = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        lblpagado = new javax.swing.JLabel();
        cbxtipodocumentoE = new javax.swing.JComboBox();
        jLabel17 = new javax.swing.JLabel();
        jlblTotal1 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        cbxServicios1 = new javax.swing.JComboBox();
        jdprFecVenta = new com.michaelbaranov.microba.calendar.DatePicker();
        jLabel18 = new javax.swing.JLabel();
        cbxPagos = new javax.swing.JComboBox();
        jLabel19 = new javax.swing.JLabel();
        ckxDetraccion = new javax.swing.JCheckBox();
        jPanel4 = new javax.swing.JPanel();
        tbxCuentaBancaria = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        tbxPorcentajeDetraccion = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        tbxMontoDetraccion = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();

        setClosable(true);
        setMaximizable(true);
        setTitle("Servicio a entregar");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        jtbelista.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "IdVenta", "Cliente", "TipoDoc", "SerieDoc", "NumDoc", "Fecha", "Hora", "IGV", "Subtotal", "Usuario", "Descuento", "Importe", "tipo_pago", "tipo_servicio", "fecha_entrega", "estado", "A cuenta"
            }
        ));
        jtbelista.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtbelistaMouseClicked(evt);
            }
        });
        jtbelista.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtbelistaKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(jtbelista);
        if (jtbelista.getColumnModel().getColumnCount() > 0) {
            jtbelista.getColumnModel().getColumn(0).setMinWidth(0);
            jtbelista.getColumnModel().getColumn(0).setPreferredWidth(0);
            jtbelista.getColumnModel().getColumn(0).setMaxWidth(0);
            jtbelista.getColumnModel().getColumn(2).setMinWidth(0);
            jtbelista.getColumnModel().getColumn(2).setPreferredWidth(0);
            jtbelista.getColumnModel().getColumn(2).setMaxWidth(0);
            jtbelista.getColumnModel().getColumn(3).setMinWidth(0);
            jtbelista.getColumnModel().getColumn(3).setPreferredWidth(0);
            jtbelista.getColumnModel().getColumn(3).setMaxWidth(0);
            jtbelista.getColumnModel().getColumn(4).setMinWidth(0);
            jtbelista.getColumnModel().getColumn(4).setPreferredWidth(0);
            jtbelista.getColumnModel().getColumn(4).setMaxWidth(0);
            jtbelista.getColumnModel().getColumn(5).setMinWidth(0);
            jtbelista.getColumnModel().getColumn(5).setPreferredWidth(0);
            jtbelista.getColumnModel().getColumn(5).setMaxWidth(0);
            jtbelista.getColumnModel().getColumn(7).setMinWidth(0);
            jtbelista.getColumnModel().getColumn(7).setPreferredWidth(0);
            jtbelista.getColumnModel().getColumn(7).setMaxWidth(0);
            jtbelista.getColumnModel().getColumn(8).setMinWidth(0);
            jtbelista.getColumnModel().getColumn(8).setPreferredWidth(0);
            jtbelista.getColumnModel().getColumn(8).setMaxWidth(0);
        }

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jbtnImprimirTicket.setMnemonic('q');
        jbtnImprimirTicket.setText("Imprimir ticket de atenci√≥n");
        jbtnImprimirTicket.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnImprimirTicketActionPerformed(evt);
            }
        });

        jbtnVender.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagen/ven1_result.png"))); // NOI18N
        jbtnVender.setMnemonic('e');
        jbtnVender.setText("Entregar");
        jbtnVender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnVenderActionPerformed(evt);
            }
        });

        jbtnGenerarComprobante.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagen/ven3_result.png"))); // NOI18N
        jbtnGenerarComprobante.setMnemonic('a');
        jbtnGenerarComprobante.setText("Generar comprobante");
        jbtnGenerarComprobante.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnGenerarComprobanteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jbtnVender, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jbtnImprimirTicket, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE)
                    .addComponent(jbtnGenerarComprobante, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jbtnGenerarComprobante, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbtnImprimirTicket, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbtnVender, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jLabel6.setText("IGV:");

        jtbelistaproductos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "IdProducto", "Cantidad", "Descripcion del Producto", "Precio", "Importe"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jtbelistaproductos);

        jtfdSubTotal.setEditable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos de Venta"));

        jLabel1.setText("Cliente:");

        jLabel2.setText("Documento:");

        jLabel8.setText("A cuenta:");

        tbxnumdoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbxnumdocActionPerformed(evt);
            }
        });

        jLabel11.setText("Fecha Entrega:");

        tbxFechaEntrega.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbxFechaEntregaActionPerformed(evt);
            }
        });

        jLabel13.setText("Tipo Servicio:");

        jLabel15.setText("Saldo:");

        cbxClientes.setEditable(true);
        cbxClientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxClientesActionPerformed(evt);
            }
        });

        jbtnBCliente1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagen/editar.png"))); // NOI18N
        jbtnBCliente1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnBCliente1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(cbxClientes, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jbtnBCliente1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(tbxnumdoc, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(tbxACuenta, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel15)
                            .addComponent(tbxSaldo, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(22, 22, 22)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(tbxTipoServicio1)
                            .addComponent(jLabel13))
                        .addGap(12, 12, 12)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11)
                            .addComponent(tbxFechaEntrega, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tbxSaldo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13)
                            .addComponent(jLabel11))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(tbxACuenta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tbxTipoServicio1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(tbxFechaEntrega, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(4, 4, 4)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jbtnBCliente1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbxClientes, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)
                        .addGap(4, 4, 4)
                        .addComponent(tbxnumdoc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 6, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Total de Venta", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Agency FB", 1, 14))); // NOI18N

        jlblTotal.setFont(new java.awt.Font("Cambria Math", 1, 36)); // NOI18N
        jlblTotal.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlblTotal.setText("S/. 0.00");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jlblTotal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jlblTotal, javax.swing.GroupLayout.DEFAULT_SIZE, 48, Short.MAX_VALUE)
                .addContainerGap())
        );

        jtfdIGV.setEditable(false);

        jLabel4.setText("SubTotal:");

        jLabel9.setText("Tecla ALT + E: Entregar");

        tbxNroVenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbxNroVentaActionPerformed(evt);
            }
        });

        jLabel10.setText("Documento:");

        jLabel12.setText("Estado: ");

        lblEstado.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        lblEstado.setText("-");

        jLabel14.setText("Pagado: ");

        lblpagado.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblpagado.setText("-");

        cbxtipodocumentoE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxtipodocumentoEActionPerformed(evt);
            }
        });

        jLabel17.setText("Tipo Documento:");

        jlblTotal1.setFont(new java.awt.Font("Cambria Math", 1, 14)); // NOI18N
        jlblTotal1.setForeground(new java.awt.Color(153, 0, 0));
        jlblTotal1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlblTotal1.setText("X-000000");

        jLabel16.setText("Fecha Pago:");

        cbxServicios1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "EFECTIVO", "TARJETA VISA", "TARJETA MASTERCARD" }));
        cbxServicios1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        cbxServicios1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxServicios1ActionPerformed(evt);
            }
        });

        jdprFecVenta.setMaximumSize(new java.awt.Dimension(2147483647, 21));
        jdprFecVenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jdprFecVentaActionPerformed(evt);
            }
        });

        jLabel18.setText("Tipo Pago:");

        cbxPagos.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        cbxPagos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxPagosActionPerformed(evt);
            }
        });

        jLabel19.setText("Pagos realizados:");

        ckxDetraccion.setText("Detracci√≥n");
        ckxDetraccion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ckxDetraccionActionPerformed(evt);
            }
        });

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        tbxCuentaBancaria.setEnabled(false);

        jLabel20.setText("Cuenta bancaria:");

        tbxPorcentajeDetraccion.setEnabled(false);
        tbxPorcentajeDetraccion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbxPorcentajeDetraccionActionPerformed(evt);
            }
        });

        jLabel21.setText("Porcentaje:");

        tbxMontoDetraccion.setEditable(false);
        tbxMontoDetraccion.setEnabled(false);

        jLabel22.setText("Monto:");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel20)
                        .addGap(56, 56, 56)
                        .addComponent(jLabel21))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(tbxCuentaBancaria, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(tbxPorcentajeDetraccion, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel22)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(tbxMontoDetraccion, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20)
                    .addComponent(jLabel21)
                    .addComponent(jLabel22))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tbxCuentaBancaria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tbxPorcentajeDetraccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tbxMontoDetraccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(46, 46, 46))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(ckxDetraccion)
                                .addGap(18, 18, 18)
                                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel16)
                                .addGap(18, 18, 18)
                                .addComponent(jdprFecVenta, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cbxPagos, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel19))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cbxServicios1, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel18))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel17)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(cbxtipodocumentoE, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jlblTotal1, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(18, 18, 18)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jtfdIGV, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jtfdSubTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(15, 15, 15))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addGap(18, 18, 18)
                                .addComponent(tbxNroVenta, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(46, 46, 46)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel9)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel12)
                                            .addComponent(jLabel14))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblpagado, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lblEstado, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 958, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(tbxNroVenta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel10)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(81, 81, 81)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblpagado, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(14, 14, 14)
                                                .addComponent(jLabel14)
                                                .addGap(8, 8, 8)))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(10, 10, 10)
                                                .addComponent(jLabel12))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(3, 3, 3)
                                                .addComponent(lblEstado))))
                                    .addComponent(jLabel9)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(77, 77, 77)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel17)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cbxtipodocumentoE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jlblTotal1)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel19)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(20, 20, 20)
                                    .addComponent(cbxPagos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel18)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(20, 20, 20)
                                    .addComponent(cbxServicios1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(16, 16, 16)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jdprFecVenta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel16))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(ckxDetraccion))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jtfdSubTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(jtfdIGV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    DefaultTableModel dtm = null;
    DefaultTableModel dtm2 = null;
//    public static ProductoDetalle ProX = new ProductoDetalle();
    public static int idventa = 0;
    public static boolean llamada = false, apertura = false, estado = false, is_acuenta = false;
    public static float total = 0f, montopagado = 0f, recidido = 0, vuelto = 0,
            a_cuenta = 0, descuento = 0f, valorIGV = 0.18f;
//    private String dniCliente = "";
    private Clientes cliente = null;

    static {
        SystemOutToLog4j.enableForClass(JIListaVentasPendientes.class);
    }

    private void CargarTipoDocs() throws SQLException {
        cbxtipodocumentoE.removeAllItems();

        TipoDoc ts = new TipoDoc();
        ts.setNombre("");
        ts.setEstado("1");
        try {
            for (TipoDoc ts2 : TipoDocADN.Lista(ts)) {
                cbxtipodocumentoE.addItem(ts2.getNombre());
            }

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(JIVentas.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    void limpiar() {
        int filas = jtbelista.getRowCount();
        for (int i = 0; i < filas; i++) {
            dtm.removeRow(0);
        }
        int filas2 = jtbelistaproductos.getRowCount();
        for (int i = 0; i < filas2; i++) {
            dtm2.removeRow(0);
        }
        tbxNroVenta.setText("");
        tbxNroVenta.requestFocus();
        cbxClientes.setSelectedItem("");
        tbxFechaEntrega.setText("");
        tbxTipoServicio1.setText("");
        lblEstado.setText("-");
        this.cliente = null;
    }

    private void CargarClientes() throws SQLException {
        cbxClientes.removeAllItems();

        Clientes ts = new Clientes();
        ts.setDni("");
        ts.setNombres("");
        ts.setEstado("1");
        try {
//            System.out.println("wtf");
            int index = -1;
            List<Clientes> list = ClientesADN.Lista(ts);
            for (Clientes ts2 : list) {
                cbxClientes.addItem(ts2.getNombres());

//                System.out.println("waaa");
            }
            for (Clientes ts2 : list) {
                index++;
                if (ts2.getIdCliente() == 1) {
                    break;
                }
//                System.out.println("waaa");
            }
            cbxClientes.setSelectedIndex(index);
        } catch (ClassNotFoundException ex) {
            System.out.println("ex: " + ex.toString());
        }

    }
    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        dtm = (DefaultTableModel) jtbelista.getModel();
        dtm2 = (DefaultTableModel) jtbelistaproductos.getModel();
        Util.ModificarTama√±oJtable(jtbelista, 5, 90);
        Util.ModificarTama√±oJtable(jtbelista, 6, 90);
        Util.OcultarColumnaJtable(jtbelista, 12);
        Util.OcultarColumnaJtable(jtbelista, 13);
        Util.OcultarColumnaJtable(jtbelista, 14);
        Util.OcultarColumnaJtable(jtbelista, 15);
//        jtbelista.getColumnModel().getColumn(5).setMinWidth(90);
//        jtbelista.getColumnModel().getColumn(5).setPreferredWidth(90);
//        jtbelista.getColumnModel().getColumn(5).setMaxWidth(90);
        try {
            CargarTipoDocs();
            CargarClientes();
            AutoCompletion.enable(cbxClientes);
        } catch (SQLException ex) {
            Logger.getLogger(JIListaVentasPendientes.class.getName()).log(Level.SEVERE, null, ex);
        }
        tbxNroVenta.setText(nroTicket);
        tbxNroVentaActionPerformed(null);
    }//GEN-LAST:event_formInternalFrameOpened

    private void jtbelistaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtbelistaMouseClicked
        if (evt.getClickCount() == 1) {
            int fila = jtbelista.getSelectedRow();
            idventa = Integer.parseInt(dtm.getValueAt(fila, 0).toString());
        } else if (evt.getClickCount() == 2) {
            VerDatosProductos();
        }
    }//GEN-LAST:event_jtbelistaMouseClicked

    private void jbtnGenerarComprobanteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnGenerarComprobanteActionPerformed
        if (lblpagado.getText().equals("POR PAGAR") || lblpagado.getText().equals("POR CANCELAR")) {
            int fila = jtbelista.getSelectedRow();
            int id = 0;
            if (fila >= 0) {
                id = Integer.parseInt(dtm.getValueAt(fila, 0).toString());
            }
            TipoDoc td = null;
            try {
                td = TipoDocADN.getByName(cbxtipodocumentoE.getSelectedItem().toString());
            } catch (SQLException ex) {
                System.out.println(Util.exceptionToString(ex));
            } catch (ClassNotFoundException ex) {
                System.out.println(Util.exceptionToString(ex));
            }
//            td = TipoDocADN.getByName(cbxtipodocumentoE.getSelectedItem().toString());
            if (td.getValue().equals("01") && (this.cliente.getDni().isEmpty() || this.cliente.getDni().length() != 11)) {
                JOptionPane.showMessageDialog(rootPane, "El cliente no tiene RUC para generar documento electr√≥nico");

                return;
            }
            if (td.getValue().equals("03") && (this.cliente.getDni().isEmpty())) {
                JOptionPane.showMessageDialog(rootPane, "El cliente no tiene DNI para generar documento electr√≥nico");
                return;
            }
            estado = false;
            float total = Float.parseFloat(jlblTotal.getText().substring(4, jlblTotal.getText().length()));
            a_cuenta = Float.parseFloat(tbxACuenta.getText().toString());

            if (cbxtipodocumentoE.getSelectedIndex() == 1) {
                a_cuenta = a_cuenta + a_cuenta * valorIGV;
            }
            Ingresos ingreso = null;
            try {
                ingreso = IngresosADN.getIngresoIdByVentaId(id);
            } catch (SQLException ex) {
                Logger.getLogger(JIListaVentasPendientes.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(JIListaVentasPendientes.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (ingreso != null && ingreso.getEstado().equals("2")) {
                if (!ingreso.getTipoDocName().equals(cbxtipodocumentoE.getSelectedItem().toString())) {
                    JOptionPane.showMessageDialog(rootPane, "El tipo de comprobante debe ser el mismo que el del pago a cuenta: " + ingreso.getTipoDocName());
                    return;
                }
            }

            if (cbxPagos.getItemCount() > 1 && cbxPagos.getSelectedIndex() == 1) {
                JOptionPane.showMessageDialog(rootPane, "Debe generar el comprobante del pago a cuenta primero");
                return;
            }
            if (!cbxPagos.getSelectedItem().toString().contains("Saldo")) {
                total = a_cuenta - descuento;
                is_acuenta = true;
            }
            if (cbxServicios1.getSelectedIndex() == 0) {

//                //float descuento = Float.parseFloat(dtm.getValueAt(fila, 0).toString());
//                if(cbxPagos.getItemCount() > 1){
//                total = total - a_cuenta - descuento;
//                
//                if(cbxPagos.getItemCount() > 1 && cbxPagos.getSelectedIndex() == 0){
//                    total = a_cuenta - descuento;
//                    is_acuenta = true;
//                }
                JDCobrar c = new JDCobrar(null, closable, total);
                c.setLocationRelativeTo(this);
                c.setVisible(true);
            } else {

                estado = true;
            }

            if (estado) {
                Ventas v = new Ventas();
                v.setIdventa(id);
                Clientes c = new Clientes();
                c.setNombres(cbxClientes.getSelectedItem().toString());
                v.setTipo_pago(cbxServicios1.getSelectedItem().toString());
                v.setDescuento(descuento);
                if ((ingreso != null && ingreso.getEstado().equals("2")) || ingreso == null) {
                    v.setA_cuenta(total);
                    v.setSaldo(0);
                }
//                v.setIgv(total - total / (1 + valorIGV));
//                v.setSubtotal(total / (1 + valorIGV));
//                v.setTotal(total);
                v.setRecibido(recidido);
                if (cbxPagos.getItemCount() > 1 && cbxPagos.getSelectedIndex() == 0) {
                    is_acuenta = true;
                }
                v.setVuelto(vuelto);

                String fecha = Formatos.sdfFecha.format(jdprFecVenta.getDate());
                try {
                    Date fechasql = Formatos.FechaSQL(fecha);
                    v.setFechaPago(fechasql);
                } catch (ParseException ex) {
                    Logger.getLogger(JIListaVentasPendientes.class.getName()).log(Level.SEVERE, null, ex);
                }

                boolean ven = false;
                int ingresoId = 0;
                try {
                    int idc = ClientesADN.CapturaIDCliente(c);
                    System.out.println("idc: " + idc);
                    Ingresos i = new Ingresos();
                    int idIngreso = 0;
                    if (cbxPagos.getItemCount() > 1 && cbxPagos.getSelectedIndex() == 0) {
                        is_acuenta = true;
                        //get ingreso x idventa
                        //i.setMonto(a_cuenta);
                        idIngreso = ingreso.getIdIngreso();
                        v.setEstado("p");
                    } else {
                        is_acuenta = false;

                        idIngreso = 0;
                        v.setEstado("1");
                    }
                    i.setTipoDoc(td);
                    i.setIdIngreso(idIngreso);
                    i.setMotivo("VENTAS");
                    i.setIndClienteE(idc);
                    i.setVentaId(id);
                    i.setVenta(v);
                    i.setDescuento(descuento);
                    i.setRecibido(recidido);
                    i.setIgv(total - total / (1 + valorIGV));
                    i.setSubtotal(total / (1 + valorIGV));
                    i.setMonto(total);
                    i.setSerieDocE(jlblTotal1.getText().split("-")[0]);
                    i.setFechaPago(Formatos.FechaSQL(fecha));
                    i.setTipoOperacion(Constantes.TIPO_OPERACION_WS);
                    if (ckxDetraccion.isSelected()) {
                        i.setDtrCuentaBancaria(tbxCuentaBancaria.getText());
                        i.setDtrPorcentaje(Float.parseFloat(tbxPorcentajeDetraccion.getText()));
                        i.setDtrMonto(Float.parseFloat(tbxMontoDetraccion.getText()));
                        i.setTipoOperacion("1001");
                    }
                    ingresoId = IngresosADN.generarComprobante(i);
                } catch (ClassNotFoundException ex) {
                    System.out.println(Util.exceptionToString(ex));
                } catch (Exception ex) {
                    System.out.println(Util.exceptionToString(ex));
                }
                if (ingresoId > 0) {
//                    cbxtipodocumentoE.removeAllItems();
                    if (is_acuenta) {
                        JOptionPane.showMessageDialog(rootPane, "Pago a cuenta facturado correctamente");
                    } else {
                        JOptionPane.showMessageDialog(rootPane, "Venta cancelada correctamente");
                    }

                }
                if (ven) {
                    JOptionPane.showMessageDialog(rootPane, "Venta cancelada correctamente");
                }
                if (!td.getValue().equals("00")) {
                    RespuestaPSE resultEnvioPSE = null;
                    ConsultaVentas2 datosVenta = null;
                    List<ConsultaVentas2> datosVentaDetalle = null;
                    try {
                        //enviar a pse

                        try {
                            datosVenta = VentasADN.getDatosVenta2(null, null, ingresoId, true).get(0);
                            if (is_acuenta) {
                                datosVentaDetalle = new ArrayList<>();
//                                String codigo, String producto, float cantidad, float precio, 
//                                float importe,int idproducto,float afectacionIGV
                                datosVentaDetalle.add(new ConsultaVentas2("-",
                                        "ADELANTO DE " + Formatos.df.format(total) + "DE PAGO DE SERVICIO ",
                                        1, total,
                                        total, 0, total - (total / (1 + valorIGV))));
                            } else {
                                datosVentaDetalle = VentasADN.Detalle_Ventas(id);
                                if (td.getValue().equals("01")) {
                                    for (ConsultaVentas2 consultaVentas2 : datosVentaDetalle) {
                                        consultaVentas2.setPrecio(consultaVentas2.getPrecio() + consultaVentas2.getPrecio() * valorIGV);
                                        consultaVentas2.setImporte(consultaVentas2.getPrecio() * consultaVentas2.getCantidad());
                                        consultaVentas2.setAfectacion_igv(consultaVentas2.getImporte() - consultaVentas2.getImporte()/(1 + valorIGV));
                                    }
                                }

                            }

                        } catch (SQLException ex) {
                            System.out.println(Util.exceptionToString(ex));
                        } catch (ClassNotFoundException ex) {
                            System.out.println(Util.exceptionToString(ex));
                        }
                        EnvioPSE envioPSE = new EnvioPSE();
                        String jsonBody = envioPSE.paramToJson(datosVenta, datosVentaDetalle);
                        resultEnvioPSE = envioPSE.envioJsonPSE(jsonBody);
                        if (resultEnvioPSE != null) {
                            if (resultEnvioPSE.isResult()) {
                                Ingresos doc = new Ingresos();
                                doc.setIdIngreso(ingresoId);
                                doc.setEnvioPseFlag("1");
                                long timeInMilliSeconds = new java.util.Date().getTime();
                                java.sql.Date date1 = new java.sql.Date(timeInMilliSeconds);
                                doc.setFechaEnvio(date1);
                                doc.setEnvioPseMensaje("Recibido correctamente");
                                doc.setNroRespuesta(resultEnvioPSE.getId());
                                doc.setCodigoQR(resultEnvioPSE.getCodigoQR());
                                doc.setXmlHash(resultEnvioPSE.getXmlHash());
                                IngresosADN.updateFlagEnvioPSE(doc);
                            } else {
                                Ingresos doc = new Ingresos();
                                doc.setIdIngreso(ingresoId);
                                doc.setEnvioPseFlag("0");
                                doc.setEnvioPseMensaje(resultEnvioPSE.getErrCode() + "-" + resultEnvioPSE.getErrMessage());
                                IngresosADN.updateFlagEnvioPSE(doc);
                                JOptionPane.showMessageDialog(rootPane, ":. Hubo un problema al enviar el documento electr√≥nico :( .:\n" + doc.getEnvioPseMensaje());
                            }
                        } else {
                            JOptionPane.showMessageDialog(rootPane, ":. Respuesta incorrecta de los servicios de facturaci√≥n DEINSOFT/SUNAT");
                        }

                        //obtenemos otra vez los datos por lo actualizado por el env√≠o
                        //                                            jlblEstado.setText("Comprobante enviado...");
                    } catch (Exception ex) {
                        System.out.println(Util.exceptionToString(ex));
                        JOptionPane.showMessageDialog(rootPane, ":. Ocurri√≥ un error al enviar el documento :( .:" + ex.getMessage());
                        limpiar();
                        estado = false;
                        //imprimir pruebas demostracion facturacion electronica
                        //                                    return;
                    }
                    if (resultEnvioPSE != null) {
                        if (resultEnvioPSE.isResult()) {
                            try {
                                String rutaDoc = ParametrosADN.Lista().get(0).getRutadocs();
                                if (rutaDoc.equals("")) {
                                    JOptionPane.showMessageDialog(rootPane, ":. Configuraci√≥n permite guardar documentos en pc, pero no se encuentra ruta configurada :( .:");
                                } else {
                                    if (resultEnvioPSE.getPdfRespuesta() != null) {
                                        Util.getPDF(resultEnvioPSE.getPdfRespuesta(), rutaDoc + "/PDF/" + datosVenta.getSerieDocE() + "-"
                                                + String.format("%08d", datosVenta.getNumDocE()) + ".pdf");
                                    }
                                    if (resultEnvioPSE.getXmlRespuesta() != null) {
                                        Util.getPDF(resultEnvioPSE.getXmlRespuesta(), rutaDoc + "/XML/" + datosVenta.getSerieDocE() + "-"
                                                + String.format("%08d", datosVenta.getNumDocE()) + ".xml");
                                    }
                                }
                                //imprimir reporte
                                //                                                jlblEstado.setText("Comprobante enviado...");
                                JDConfirmacion dialog = new JDConfirmacion(null, closable, ingresoId, false, ParametrosADN.Lista().get(0).getNombreImpresora(), "i", id, is_acuenta ? "1" : "0");
                                dialog.setLocationRelativeTo(this);
                                dialog.setVisible(true);

                            } catch (Exception ex) {
                                System.out.println(Util.exceptionToString(ex));
                                JOptionPane.showMessageDialog(rootPane, ":. Ocurri√≥ un error inesperado al guardar documentos en pc :(: " + ex.toString());
                            }

                        }
                    } else {
                        JDConfirmacion dialog;
                        try {
                            dialog = new JDConfirmacion(null, closable, ingresoId, false, ParametrosADN.Lista().get(0).getNombreImpresora(), "i", id, is_acuenta ? "1" : "0");
                            dialog.setLocationRelativeTo(this);
                            dialog.setVisible(true);
                        } catch (SQLException ex) {
                            Logger.getLogger(JIListaVentasPendientes.class.getName()).log(Level.SEVERE, null, ex);
                        } catch (ClassNotFoundException ex) {
                            Logger.getLogger(JIListaVentasPendientes.class.getName()).log(Level.SEVERE, null, ex);
                        }

                    }

                } else {
                    JDConfirmacion dialog = null;
                    try {
                        dialog = new JDConfirmacion(null, closable, ingresoId, false, ParametrosADN.Lista().get(0).getNombreImpresora(), "i", id, is_acuenta ? "1" : "0");
                    } catch (SQLException ex) {
                        System.out.println(Util.exceptionToString(ex));
                    } catch (ClassNotFoundException ex) {
                        System.out.println(Util.exceptionToString(ex));
                    }
                    dialog.setLocationRelativeTo(this);
                    dialog.setVisible(true);
                }

                tbxNroVentaActionPerformed(evt);
            }

        }
    }//GEN-LAST:event_jbtnGenerarComprobanteActionPerformed

    private void jbtnImprimirTicketActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnImprimirTicketActionPerformed
        int fila = jtbelista.getSelectedRow();
        int id = 0;
        if (fila >= 0) {
            id = Integer.parseInt(dtm.getValueAt(fila, 0).toString());
            JDConfirmacion dialog = null;
            try {
                dialog = new JDConfirmacion(null, closable, id, true, ParametrosADN.Lista().get(0).getNombreImpresora(), "v", id, "0");
            } catch (SQLException ex) {
                Logger.getLogger(JIListaVentasPendientes.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(JIListaVentasPendientes.class.getName()).log(Level.SEVERE, null, ex);
            }
            dialog.setLocationRelativeTo(this);
            dialog.setVisible(true);
        }
    }//GEN-LAST:event_jbtnImprimirTicketActionPerformed

    private void jbtnVenderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnVenderActionPerformed
        try {
            if (jtbelista.getRowCount() > 0) {
                total = Float.parseFloat(jlblTotal.getText().substring(4, jlblTotal.getText().length()));
                boolean isForPayment = false;
                estado = true;
                if (lblpagado.getText().equals("POR PAGAR") || lblpagado.getText().equals("POR CANCELAR")) {
                    isForPayment = true;
                } else {
                    estado = true;
                }
                if (estado) {
                    if (jtbelista.getRowCount() > 0) {
                        if (isForPayment) {
                            JOptionPane.showMessageDialog(rootPane, "Primero debe generar el comprobante");
                            return;
                        }

                        Ventas v = new Ventas();
                        int fila = jtbelista.getSelectedRow();
                        int id = 0;
                        if (fila >= 0) {
                            id = Integer.parseInt(dtm.getValueAt(fila, 0).toString());

                            v.setIdventa(id);
                            v.setDescuento(descuento);
                            v.setEstado("1");
                            boolean ven = VentasADN.entregarProducto(v);
                            if (ven) {
                                JOptionPane.showMessageDialog(rootPane, "Venta Registrada");
                                limpiar();
                                cbxtipodocumentoEActionPerformed(evt);
                                idventa = 0;
                            }

                        }

                    }
                    estado = false;
                }
            }

        } catch (Exception exception) {
            JOptionPane.showMessageDialog(rootPane, exception.toString());
        }
    }//GEN-LAST:event_jbtnVenderActionPerformed

    private void jtbelistaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtbelistaKeyPressed
        try {
            if (evt.getKeyCode() == KeyEvent.VK_SPACE) {
                int fila = jtbelista.getSelectedRow();
                idventa = Integer.parseInt(dtm.getValueAt(fila, 0).toString());
                if (fila >= 0) {
                    cbxClientes.setSelectedItem(jtbelista.getValueAt(fila, 1).toString());
                    jtfdIGV.setText(jtbelista.getValueAt(fila, 7).toString());
                    jtfdSubTotal.setText(jtbelista.getValueAt(fila, 8).toString());
                    //tbxtipodoc.setText(jtbelista.getValueAt(fila, 2).toString());
                    tbxACuenta.setText(jtbelista.getValueAt(fila, 3).toString());
                    jlblTotal.setText("S/. " + jtbelista.getValueAt(fila, 10).toString());
                    VerDatosProductos();
                }
            }
//            if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
//                int fila = jtbelista.getSelectedRow();
//                idventa = Integer.parseInt(dtm.getValueAt(fila, 0).toString());
//                if (fila >= 0) {
//                    jtfdCliente.setText(jtbelista.getValueAt(fila, 1).toString());
//                    jtfdIGV.setText(jtbelista.getValueAt(fila, 7).toString());
//                    jtfdSubTotal.setText(jtbelista.getValueAt(fila, 8).toString());
//                    tbxtipodoc.setText(jtbelista.getValueAt(fila, 2).toString());
//                    tbxserie.setText(jtbelista.getValueAt(fila, 3).toString());
//                    jlblTotal.setText("S/. " + jtbelista.getValueAt(fila, 10).toString());
//                    
//                    tbxTipoServicio.setText(jtbelista.getValueAt(fila, 12).toString());
//                    jdprFecVenta1.setDate(Formatos.FechaSQL(jtbelista.getValueAt(fila, 13).toString())); 
//                    lblEstado.setText(jtbelista.getValueAt(fila, 14).toString());
//                    
//                    VerDatosProductos();
////                    jbtnVenderActionPerformed(null);
//                }
//            }
        } catch (Exception e) {
        }


    }//GEN-LAST:event_jtbelistaKeyPressed

    private void tbxNroVentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbxNroVentaActionPerformed
        try {
            if (tbxNroVenta.getText().length() > 0) {
                VerDatos();
                if (jtbelista.getRowCount() > 0) {
                    cbxPagos.removeAllItems();
                    jtbelista.setRowSelectionInterval(0, 0);
                    jtbelista.requestFocus();

                    int fila = jtbelista.getSelectedRow();
                    idventa = Integer.parseInt(dtm.getValueAt(fila, 0).toString());
                    if (fila >= 0) {
                        cbxClientes.setSelectedItem(this.cliente.getNombres());

                        //tbxtipodoc.setText(jtbelista.getValueAt(fila, 2).toString());
                        tbxnumdoc.setText(this.cliente.getDni());
                        tbxACuenta.setText(jtbelista.getValueAt(fila, 16).toString());
                        total = Float.parseFloat(jtbelista.getValueAt(fila, 11).toString());
                        a_cuenta = Float.parseFloat(jtbelista.getValueAt(fila, 16).toString());
                        descuento = Float.parseFloat(jtbelista.getValueAt(fila, 10).toString());
                        float saldo = 0f;
                        if (a_cuenta > 0) {
                            saldo = total - a_cuenta - descuento;
                        } else {
                            saldo = 0;
                        }
                        tbxSaldo.setText(Formatos.df.format(saldo));
                        jtfdIGV.setText(jtbelista.getValueAt(fila, 7).toString());
                        jtfdSubTotal.setText(jtbelista.getValueAt(fila, 8).toString());

                        Ingresos i = IngresosADN.getIngresoIdByVentaId(idventa);
                        //no hay pagos a cuenta
                        //float total2 = 0f;
                        if (i != null) {
                            if (!i.getEstado().equals("2")) {
                                cbxPagos.addItem("A cuenta: " + String.valueOf(a_cuenta));
                                total = a_cuenta;
                            } else {
                                //total2 = total;
                                total = Float.parseFloat(jtbelista.getValueAt(fila, 11).toString());
                                total = total - a_cuenta;
                            }

                        }
                        cbxPagos.addItem("Saldo: " + String.valueOf(total));
                        jlblTotal.setText("S/. " + String.valueOf(total));
                        tbxTipoServicio1.setText(jtbelista.getValueAt(fila, 13).toString());
                        tbxFechaEntrega.setText(jtbelista.getValueAt(fila, 14).toString());

                        String estadoCancelado = jtbelista.getValueAt(fila, 15).toString();
                        String estadoEntregado;
//                    String estadoEntregado = jtbelista.getValueAt(fila, 15).toString();

//                    String estado_v = "";
//                    if(estadoCancelado.equals("PAGADO")){
//                        estado_v = "PAGADO";
//                    }
                        System.out.println("estadoCancelado: " + estadoCancelado);
                        switch (estadoCancelado) {
                            case "p":
                                estadoCancelado = "POR CANCELAR";
                                estadoEntregado = "POR ENTREGAR";
                                break;
                            case "1":
//                            if (Float.parseFloat(tbxACuenta.getText().toString()) > 0) {
//                                estadoCancelado = "POR CANCELAR";
//                            } else {
//                                estadoCancelado = "PAGADO";
//                            }
                                estadoCancelado = "PAGADO";
                                estadoEntregado = "POR ENTREGAR";
                                break;
                            case "0":
                                estadoCancelado = "ANULADO";
                                estadoEntregado = "ANULADO";
                                break;
                            default:
                                estadoCancelado = "PAGADO";
                                estadoEntregado = "ENTREGADO";
                                break;
                        }
//                    if (!estadoCancelado.equals("POR PAGAR")) {
//                        if (Float.parseFloat(tbxACuenta.getText().toString()) > 0) {
//                            estadoCancelado = "POR CANCELAR";
//                        } else {
//                            estadoCancelado = "PAGADO";
//                        }
//                    } else {
//                        if (!lblEstado.getText().equals("ENTREGADO")) {
//                            estadoCancelado = "POR PAGAR";
//                        } else {
//                            estadoCancelado = "PAGADO";
//                        }
//
//                    }
                        lblEstado.setText(estadoEntregado);
                        lblpagado.setText(estadoCancelado);
                        lblEstado.setForeground(Color.red);
                        lblpagado.setForeground(Color.red);
                        VerDatosProductos();
                        tbxNroVenta.requestFocus();
                        if (lblEstado.getText().equals("ENTREGADO") || lblEstado.getText().equals("ANULADO")) {
                            jbtnVender.setEnabled(false);
                        } else {
                            jbtnVender.setEnabled(true);
                        }
                        if (lblpagado.getText().equals("PAGADO") || lblEstado.getText().equals("ANULADO")) {
                            jLabel17.setEnabled(false);
                            cbxtipodocumentoE.setEnabled(false);
                            jlblTotal1.setEnabled(false);
                            jbtnGenerarComprobante.setEnabled(false);
                            cbxServicios1.setEnabled(false);
                            cbxPagos.setEnabled(false);

                        } else {
                            jLabel17.setEnabled(true);
                            cbxtipodocumentoE.setEnabled(true);
                            jlblTotal1.setEnabled(true);
                            jbtnGenerarComprobante.setEnabled(true);
                            cbxServicios1.setEnabled(true);
                            cbxPagos.setEnabled(true);
                        }
                        //TipoDoc td = TipoDocADN.getByName(cbxtipodocumentoE.getSelectedItem().toString());

                        if (a_cuenta > 0 && i.getEstado().equals("2")) {
                            cbxtipodocumentoE.setSelectedItem(i.getTipoDocName());
                            cbxtipodocumentoE.setEditable(false);
                        } else {
                            cbxtipodocumentoEActionPerformed(evt);
                        }
                    }
                }

            }

        } catch (SQLException ex) {
            Logger.getLogger(JIListaVentasPendientes.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(JIListaVentasPendientes.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_tbxNroVentaActionPerformed

    private void tbxnumdocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbxnumdocActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tbxnumdocActionPerformed

    private void tbxFechaEntregaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbxFechaEntregaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tbxFechaEntregaActionPerformed

    private void cbxtipodocumentoEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxtipodocumentoEActionPerformed
        int id;
        try {
            if (cbxtipodocumentoE.getItemCount() > 0) {
                id = TipoDocADN.getId(cbxtipodocumentoE.getSelectedItem().toString());
                NumeracionDocumento n = NumeracionDocumentoADN.getByTipoddocId(id);
                jlblTotal1.setText(n.getSerie() + "-" + String.format("%08d", n.getUltimoNumero() + 1));
                if (cbxtipodocumentoE.getSelectedIndex() == 1) {
                    DefaultTableModel model = (DefaultTableModel) jtbelistaproductos.getModel();
                    for (int i = 0; i < jtbelistaproductos.getRowCount(); i++) {
                        float cantidad = Float.parseFloat(jtbelistaproductos.getValueAt(i, 1).toString());
                        float precio = Float.parseFloat(jtbelistaproductos.getValueAt(i, 3).toString());
                        float importe = Float.parseFloat(jtbelistaproductos.getValueAt(i, 4).toString());
                        precio = precio + (precio * valorIGV);
                        model.setValueAt(Formatos.df.format(precio), i, 3);
                        model.setValueAt(Formatos.df.format(precio * cantidad), i, 4);

                    }
                    verTotales();
                } else {
                    VerDatosProductos();
                    jtfdIGV.setText(Formatos.df.format(total - (total / (1 + valorIGV))));
                    jtfdSubTotal.setText(Formatos.df.format(total / (1 + valorIGV)));
                    jlblTotal.setText("S/. " + Formatos.df.format(total));
                }

            }

        } catch (Exception ex) {
            Logger.getLogger(JIVentas.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_cbxtipodocumentoEActionPerformed

    private void cbxClientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxClientesActionPerformed
        try {
            this.cliente = ClientesADN.getByName(cbxClientes.getSelectedItem().toString());
            if (lblpagado.getText().equals("POR PAGAR")
                    && !cbxtipodocumentoE.getSelectedItem().toString().equals("NOTA DE VENTA") && this.cliente.getDni().isEmpty()) {
                //                JOptionPane.showMessageDialog(rootPane, "El cliente no tiene dni para generar documento electr√≥nico");
                jLabel1.setText("Cliente (SIN DNI O RUC!):");
            } else {
                jLabel1.setText("Cliente: ");
            }
        } catch (SQLException ex) {
            System.out.println("ex: " + ex.toString());
        } catch (ClassNotFoundException ex) {
            System.out.println("ex: " + ex.toString());
        }
    }//GEN-LAST:event_cbxClientesActionPerformed

    private void jbtnBCliente1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnBCliente1ActionPerformed

        try {
            this.cliente = ClientesADN.getByName(cbxClientes.getSelectedItem().toString());
            JDModificarClientes dialog = new JDModificarClientes(null, closable, cliente.getIdCliente());
            dialog.setLocationRelativeTo(this);
            dialog.setVisible(true);
            tbxNroVentaActionPerformed(evt);

//        JDAgregarClientes v = new JDAgregarClientes(null, closable);
//        v.setLocationRelativeTo(this);
//        v.setVisible(true);
//            try {
//                CargarClientes();
//                cbxClientes.setSelectedItem(nuevo_cliente);
//                cbxClientes.requestFocus();
//            } catch (SQLException ex) {
//                System.out.println("ex: "+ex.toString());
//            }
        } catch (SQLException ex) {
            Logger.getLogger(JIListaVentasPendientes.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(JIListaVentasPendientes.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jbtnBCliente1ActionPerformed

    private void cbxServicios1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxServicios1ActionPerformed
        //        if (cbxServicios1.getSelectedIndex() == 0 || cbxServicios1.getSelectedIndex() == 2 || cbxServicios1.getSelectedIndex() == 3) {
        //            cbxtipodocumentoE.setEnabled(true);
        //            int id;
        //            try {
        //                if (cbxtipodocumentoE.getItemCount() > 0) {
        //                    id = TipoDocADN.getId(cbxtipodocumentoE.getSelectedItem().toString());
        //                    NumeracionDocumento n = NumeracionDocumentoADN.getByTipoddocId(id);
        //                    tbxserie1.setText(n.getSerie());
        //                    jlblTotal1.setText(n.getSerie() + "-" + String.format("%08d", n.getUltimoNumero() + 1));
        //                    if (this.cliente != null) {
        //                        if (cbxtipodocumentoE.getSelectedIndex() != 0 && this.cliente.getDni().isEmpty()) {
        //                            JOptionPane.showMessageDialog(rootPane, "El cliente no tiene dni para generar documento electr√≥nico");
        //                        }
        //                    }
        //                }
        //
        //            } catch (ClassNotFoundException ex) {
        //               System.out.println("ex: "+ex.toString());
        //            } catch (SQLException ex) {
        //               System.out.println("ex: "+ex.toString());
        //            }
        //        } else {
        //            jlblTotal1.setText(" ");
        //            cbxtipodocumentoE.setEnabled(false);
        //        }
    }//GEN-LAST:event_cbxServicios1ActionPerformed

    private void jdprFecVentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jdprFecVentaActionPerformed
//        try {
//            try {
//                jdprFecVenta1.setDate(sumarRestarDiasFecha(jdprFecVenta.getDate(), 2));
//            } catch (PropertyVetoException ex) {
//                System.out.println("ex: " + ex.toString());
//            }
//        } catch (ParseException ex) {
//            System.out.println("ex: " + ex.toString());
//        }
    }//GEN-LAST:event_jdprFecVentaActionPerformed

    private void cbxPagosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxPagosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbxPagosActionPerformed

    private void ckxDetraccionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ckxDetraccionActionPerformed
        if (ckxDetraccion.isSelected()) {
            tbxCuentaBancaria.setEnabled(true);
            tbxPorcentajeDetraccion.setEnabled(true);
            tbxMontoDetraccion.setEnabled(true);
        } else {
            tbxCuentaBancaria.setEnabled(false);
            tbxPorcentajeDetraccion.setEnabled(false);
            tbxMontoDetraccion.setEnabled(false);
        }
    }//GEN-LAST:event_ckxDetraccionActionPerformed

    private void tbxPorcentajeDetraccionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbxPorcentajeDetraccionActionPerformed
        float porcentaje = 0;
        try {
            porcentaje = Float.parseFloat(tbxPorcentajeDetraccion.getText());
        } catch (Exception e) {
        }
        float monto = this.total * porcentaje/100;
        tbxMontoDetraccion.setText(Formatos.df.format(monto));
    }//GEN-LAST:event_tbxPorcentajeDetraccionActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cbxClientes;
    private javax.swing.JComboBox cbxPagos;
    private javax.swing.JComboBox cbxServicios1;
    private javax.swing.JComboBox cbxtipodocumentoE;
    private javax.swing.JCheckBox ckxDetraccion;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton jbtnBCliente1;
    private javax.swing.JButton jbtnGenerarComprobante;
    private javax.swing.JButton jbtnImprimirTicket;
    private javax.swing.JButton jbtnVender;
    private com.michaelbaranov.microba.calendar.DatePicker jdprFecVenta;
    private javax.swing.JLabel jlblTotal;
    private javax.swing.JLabel jlblTotal1;
    private javax.swing.JTable jtbelista;
    private javax.swing.JTable jtbelistaproductos;
    private javax.swing.JTextField jtfdIGV;
    private javax.swing.JTextField jtfdSubTotal;
    private javax.swing.JLabel lblEstado;
    private javax.swing.JLabel lblpagado;
    private javax.swing.JTextField tbxACuenta;
    private javax.swing.JTextField tbxCuentaBancaria;
    private javax.swing.JTextField tbxFechaEntrega;
    private javax.swing.JTextField tbxMontoDetraccion;
    private javax.swing.JTextField tbxNroVenta;
    private javax.swing.JTextField tbxPorcentajeDetraccion;
    private javax.swing.JTextField tbxSaldo;
    private javax.swing.JTextField tbxTipoServicio1;
    private javax.swing.JTextField tbxnumdoc;
    // End of variables declaration//GEN-END:variables

    void verTotales() throws SQLException, ClassNotFoundException {
//        float importe = 0;
//        for (int i = 0; i < jtbelistaproductos.getRowCount(); i++) {
//            float cantidad = Float.parseFloat(jtbelistaproductos.getValueAt(i, 1).toString());
//            float precio = Float.parseFloat(jtbelistaproductos.getValueAt(i, 3).toString());
//            float importeDetalle = Float.parseFloat(jtbelistaproductos.getValueAt(i, 4).toString());
//            importe = importe + importeDetalle;
//        }
//        float subtotal = importe / (1 + valorIGV);
//        float igv = importe - subtotal;

//        float saldo = 0f;
//        Ingresos i = IngresosADN.getIngresoIdByVentaId(idventa);
//        if (a_cuenta > 0) {
//            saldo = total - i.getMonto() - descuento;
//        } else {
//            saldo = total;
//        }
        float totalMasIGV = 0f;
        totalMasIGV = total + (total * valorIGV);
        jtfdIGV.setText(Formatos.df.format(total * valorIGV));
        jtfdSubTotal.setText(Formatos.df.format(total));
        jlblTotal.setText("S/. " + Formatos.df.format(totalMasIGV));
        //cbxPagos.set("Saldo: " + String.valueOf(saldo));
    }

    private void VerDatos() throws SQLException, ClassNotFoundException {
//        try {
        int filas = jtbelista.getRowCount();
        for (int i = 0; i < filas; i++) {
            dtm.removeRow(0);
        }
        for (ConsultaVentas la : VentasADN.ListaVentasPendientes(tbxNroVenta.getText())) {
//            dniCliente = la.getDniCliente();
            idventa = la.getIdventa();
            dtm.addRow(la.ArregloDatos3());
            this.cliente = ClientesADN.getByName(la.getCliente());
        }
//        } catch (Exception e) {
//            JOptionPane.showMessageDialog(rootPane,"waa: "+ e.toString());
//        }
    }

    private void VerDatosProductos() {
        try {
            int filas = jtbelistaproductos.getRowCount();
            for (int i = 0; i < filas; i++) {
                dtm2.removeRow(0);
            }
            for (ProductoDetalle la : VentasADN.DetalleVenta(idventa)) {
                dtm2.addRow(la.DatosToArray2());
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, e.toString());
        }
    }
//    private void EnviarDatos() throws NumberFormatException {
//        int fila = jtbelista.getSelectedRow();
////        modif = true;
//        if (fila >= 0) {
//            if (JIProductos.llamada) {
//                JIProductos.marca.setIdMarcas(Integer.parseInt(jtbelista.getValueAt(fila, 0).toString()));
//                JIProductos.marca.setNombre(jtbelista.getValueAt(fila, 1).toString());
//            }
//            dispose();
//        }
//    }
}
